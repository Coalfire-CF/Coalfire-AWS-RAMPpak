---

- name: "6.2.1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords"
  block:
      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadow passwords"
        shell: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
        changed_when: false
        failed_when: false
        register: amazon2_6_2_1_shadow
        args:
            warn: false

      - name: "6.2.1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords | Good News"
        debug:
            msg: "Good News!!  No Unshadowed passwords have been found"
        when: amazon2_6_2_1_shadow.stdout | length == 0

      - name: "6.2.1 | PATCH | Ensure accounts in /etc/passwd use shadow passwords | Alert on no shadow passwords"
        debug:
            msg:
                - "ALERT! There are users that are not using shadow passwords. Please address to conform to CIS standards"
                - "The users below are the out of compliance users"
                - "{{ amazon2_6_2_1_shadow.stdout_lines }}"
        when: amazon2_6_2_1_shadow.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_1
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.1
      - accounts

- name: "6.2.2 | PATCH |  Ensure /etc/shadow password fields are not empty"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  with_items:
      - "{{ empty_password_accounts.stdout_lines }}"
  when:
      - empty_password_accounts.rc
      - amazon2cis_rule_6_2_2
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.2
      - accounts

- name: "6.2.3 | PATCH | Ensure all groups in /etc/passwd exist in /etc/group"
  block:
      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Check /etc/passwd entries"
        shell: pwck -r | grep 'no group' | awk '{ gsub("[:\47]",""); print $2}'
        changed_when: false
        failed_when: false
        check_mode: false
        register: amazon2_6_2_3_passwd_gid_check

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print message that all groups match between passwd and group files"
        debug:
            msg: "Good News! There are no users that have non-existent GUIDs (Groups)"
        when: amazon2_6_2_3_passwd_gid_check.stdout | length == 0

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print warning about users with invalid GIDs missing GID entries in /etc/group"
        debug:
            msg: "WARNING: The following users have non-existent GIDs (Groups): {{ amazon2_6_2_3_passwd_gid_check.stdout_lines | join (', ') }}"
        changed_when: false
        when: amazon2_6_2_3_passwd_gid_check.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_3
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.3
      - groups

- name: "6.2.4 | AUDIT | Ensure shadow group is empty"
  block:
      - name: "6.2.4 | AUDIT | Ensure shadow group is empty"
        shell: "grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group"
        changed_when: false
        failed_when: false
        register: amazon2_6_2_4_users_in_shadow_group

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | Print no user in shadow group"
        debug:
            msg: "Good News! There are no users in the shadow group"
        when: amazon2_6_2_4_users_in_shadow_group.stdout | length == 0

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | Print no user in shadow group"
        debug:
            msg: "Warning: The following users are in the shadow group: {{ amazon2_6_2_4_users_in_shadow_group.stdout_lines }}"
        when: amazon2_6_2_4_users_in_shadow_group.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_4
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.4
      - groups

- name: "6.2.5 | PATCH | Ensure no duplicate user names exist"
  block:
      - name: "6.2.5 | AUDIT | Ensure no duplicate user names exist | Check for duplicate User Names"
        shell: "pwck -r | awk -F: '{if ($1 in users) print $1 ; else users[$1]}' /etc/passwd"
        changed_when: false
        failed_when: false
        register: amazon2_6_2_5_user_username_check

      - name: "6.2.5 | AUDIT | Ensure no duplicate user names exist | Print message that no duplicate user names exist"
        debug:
            msg: "Good News! There are no duplicate user names in the system"
        when: amazon2_6_2_5_user_username_check.stdout | length == 0

      - name: "6.2.5 | AUDIT | Ensure no duplicate user names exist | Print warning about users with duplicate User Names"
        debug:
            msg: "Warning: The following user names are duplicates: {{ amazon2_6_2_5_user_username_check.stdout_lines }}"
        when: amazon2_6_2_5_user_username_check.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_5
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.5
      - accounts

- name: "6.2.6 | PATCH | Ensure no duplicate group names exist"
  block:
      - name: "6.2.6 | AUDIT | Ensure no duplicate group names exist | Check for duplicate group names"
        shell: 'getent passwd | cut -d: -f1 | sort -n | uniq -d'
        changed_when: false
        failed_when: false
        register: amazon2_6_2_6_group_group_check

      - name: "6.2.6 | AUDIT | Ensure no duplicate group names exist | Print message that no duplicate groups exist"
        debug:
            msg: "Good News! There are no duplicate group names in the system"
        when: amazon2_6_2_6_group_group_check.stdout | length == 0

      - name: "6.2.6 | AUDIT | Ensure no duplicate group names exist | Print warning about users with duplicate group names"
        debug:
            msg: "Warning: The following group names are duplicates: {{ amazon2_6_2_6_group_group_check.stdout_lines }}"
        when: amazon2_6_2_6_group_group_check.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_6
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.6
      - groups

- name: "6.2.7 | PATCH | Ensure no duplicate UIDs exist"
  block:
      - name: "6.2.7 | AUDIT | Ensure no duplicate UIDs exist | Check for duplicate UIDs"
        shell: "pwck -r | awk -F: '{if ($3 in uid) print $1 ; else uid[$3]}' /etc/passwd"
        changed_when: false
        failed_when: false
        register: amazon2_6_2_7_user_uid_check

      - name: "6.2.7 | AUDIT | Ensure no duplicate UIDs exist | Print message that no duplicate UIDs exist"
        debug:
            msg: "Good News! There are no duplicate UID's in the system"
        when: amazon2_6_2_7_user_uid_check.stdout | length == 0

      - name: "6.2.7 | AUDIT | Ensure no duplicate UIDs exist | Print warning about users with duplicate UIDs"
        debug:
            msg: "Warning: The following users have UIDs that are duplicates: {{ amazon2_6_2_7_user_uid_check.stdout_lines }}"
        when: amazon2_6_2_7_user_uid_check.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_7
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.7
      - accounts

- name: "6.2.8 | PATCH | Ensure no duplicate GIDs exist"
  block:
      - name: "6.2.8 | AUDIT | Ensure no duplicate GIDs exist | Check for duplicate GIDs"
        shell: "pwck -r | awk -F: '{if ($3 in users) print $1 ; else users[$3]}' /etc/group"
        changed_when: false
        failed_when: false
        register: amazon2_6_2_8_user_user_check

      - name: "6.2.8 | AUDIT | Ensure no duplicate GIDs exist | Print message that no duplicate GID's exist"
        debug:
            msg: "Good News! There are no duplicate GIDs in the system"
        when: amazon2_6_2_8_user_user_check.stdout | length == 0

      - name: "6.2.8 | AUDIT | Ensure no duplicate GIDs exist | Print warning about users with duplicate GIDs"
        debug:
            msg: "Warning: The following groups have duplicate GIDs: {{ amazon2_6_2_8_user_user_check.stdout_lines }}"
        when: amazon2_6_2_8_user_user_check.stdout | length > 0
  when:
      - amazon2cis_rule_6_2_8
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.8
      - groups

- name: "6.2.9 | PATCH | Ensure root is the only UID 0 account"
  command: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  with_items:
      - "{{ uid_zero_accounts_except_root.stdout_lines }}"
  when:
      - uid_zero_accounts_except_root.rc
      - amazon2cis_rule_6_2_9
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.9
      - accounts
      - root

- name: "6.2.10 | PATCH | Ensure root PATH Integrity"
  block:
      - name: "6.2.10 | AUDIT | Ensure root PATH Integrity | Determine empty value"
        shell: 'echo $PATH | grep ::'
        changed_when: false
        failed_when: amazon2_6_2_10_path_colon.rc == 0
        register: amazon2_6_2_10_path_colon

      - name: "6.2.10 | AUDIT | Ensure root PATH Integrity | Determin colon end"
        shell: 'echo $PATH | grep :$'
        changed_when: false
        failed_when: amazon2_6_2_10_path_colon_end.rc == 0
        register: amazon2_6_2_10_path_colon_end

      - name: "6.2.10 | AUDIT | Ensure root PATH Integrity | Determine dot in path"
        shell: "/bin/bash --login -c 'env | grep ^PATH=' | grep ^PATH | sed -e 's/PATH=//' -e 's/::/:/' -e 's/:$//' -e 's/:/\\n/g'"
        changed_when: false
        failed_when: '"." in amazon2_6_2_10_dot_in_path.stdout_lines'
        register: amazon2_6_2_10_dot_in_path

      - name: "6.2.10 | AUDIT | Ensure root PATH Integrity | Alert on empty value, colon end, and dot in path"
        debug:
            msg:
                - "The following paths have an empty value: {{ amazon2_6_2_10_path_colon.stdout_lines }}"
                - "The following paths have colon end: {{ amazon2_6_2_10_path_colon_end.stdout_lines }}"
                - "The following paths have a dot in the path: {{ amazon2_6_2_10_dot_in_path.stdout_lines }}"

      - name: "6.2.10 | PATCH | Ensure root PATH Integrity (AUTOMATED) | Determine rights and owner"
        file:
            path: '{{ item }}'
            state: directory
            owner: root
            mode: 'o-w,g-w'
            follow: true
        with_items:
            - "{{ amazon2_6_2_10_dot_in_path.stdout_lines }}"
  when:
      - amazon2cis_rule_6_2_10
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.10
      - root

- name: "6.2.11 | PATCH | Ensure all users' home directories exist"
  block:
      - name: "6.2.11 | PATCH | Ensure all users' home directories exist | Check for paths"
        stat:
            path: "{{ item }}"
        register: amazon2_6_2_11_audit
        with_items:
            - "{{ amazon2cis_passwd | selectattr('uid', '>=', amazon2cis_int_gid) | selectattr('uid', '!=', 65534) | map(attribute='dir') | list }}"

      - name: "6.2.11 | PATCH | Ensure all users' home directories exist"
        shell: find -H {{ item.0 | quote }} -not -type l -perm /027
        changed_when: amazon2_6_2_11_patch_audit | length > 0
        check_mode: false
        register: amazon2_6_2_11_patch_audit
        with_together:
            - "{{ amazon2_6_2_11_audit.results | map(attribute='item') | list }}"
            - "{{ amazon2_6_2_11_audit.results | map(attribute='stat') | list  }}"
        loop_control:
            label: "{{ item.0 }}"
        when:
            - ansible_check_mode
            - item.1.exists

      - name: "6.2.11 | PATCH | Ensure all users' home directories exist"
        file:
            path: "{{ item.0 }}"
            mode: a-st,g-w,o-rwx
            recurse: true
        register: amazon2_6_2_11_patch
        with_together:
            - "{{ amazon2_6_2_11_audit.results | map(attribute='item') | list }}"
            - "{{ amazon2_6_2_11_audit.results | map(attribute='stat') | list  }}"
        loop_control:
            label: "{{ item.0 }}"
        when:
            - not ansible_check_mode
            - item.1.exists

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "6.2.11 | PATCH | Ensure all users' home directories exist"
        acl:
            path: "{{ item.0 }}"
            default: true
            state: present
            recursive: true
            etype: "{{ item.1.etype }}"
            permissions: "{{ item.1.mode }}"
        with_nested:
            - "{{ (ansible_check_mode | ternary(amazon2_6_2_11_patch_audit, amazon2_6_2_11_patch)).results |
              rejectattr('skipped', 'defined') | map(attribute='item') | map('first') | list }}"
            -
                - { etype: group, mode: rx }
                - { etype: other, mode: '0' }
  when:
      - amazon2cis_rule_6_2_11
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.11
      - accounts

- name: "6.2.12 | PATCH | Ensure users own their home directories"
  file:
      path: "{{ item.dir }}"
      owner: "{{ item.id }}"
      state: directory
  with_items:
      - "{{ amazon2cis_passwd | selectattr('uid', '>=', 1000) | selectattr('uid', '!=', 65534) | list }}"
  loop_control:
      label: "{{ amazon2cis_passwd_label }}"
  when:
      - amazon2cis_rule_6_2_12
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.12
      - accounts
      - skip_ansible_lint

- name: "6.2.13 | PATCH | Ensure users' home directories permissions are 750 or more restrictive"
  block:
      - name: "6.2.13 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        stat:
            path: "{{ item }}"
        with_items: "{{ amazon2cis_passwd | selectattr('uid', '>=', 1000) | selectattr('uid', '!=', 65534) | map(attribute='dir') | list }}"
        register: amazon2_6_2_13_audit

      - name: "6.2.13 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        command: find -H {{ item.0 | quote }} -not -type l -perm /027
        changed_when: amazon2_6_2_13_patch_audit.stdout != ""
        failed_when: false
        check_mode: false
        register: amazon2_6_2_13_patch_audit
        with_together:
            - "{{ amazon2_6_2_13_audit.results | map(attribute='item') | list }}"
            - "{{ amazon2_6_2_13_audit.results | map(attribute='stat') | list }}"
        loop_control:
            label: "{{ item.0 }}"
        when:
            - ansible_check_mode
            - item.1.exists

      - name: "6.2.13 | AUDIT | Ensure users' home directories permissions are 750 or more restrictive"
        file:
            path: "{{ item.0 }}"
            recurse: true
            mode: a-st,g-w,o-rwx
        register: amazon2_6_2_13_patch
        with_together:
            - "{{ amazon2_6_2_13_audit.results | map(attribute='item') | list }}"
            - "{{ amazon2_6_2_13_audit.results | map(attribute='stat') | list }}"
        loop_control:
            label: "{{ item.0 }}"
        when:
            - not ansible_check_mode
            - item.1.exists

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "6.2.13 | PATCH | Ensure users' home directories permissions are 750 or more restrictive"
        acl:
            path: "{{ item.0 }}"
            default: true
            state: present
            recursive: true
            etype: "{{ item.1.etype }}"
            permissions: "{{ item.1.mode }}"
        with_nested:
            - "{{ (ansible_check_mode | ternary(amazon2_6_2_13_patch_audit, amazon2_6_2_13_patch)).results |
              rejectattr('skipped', 'defined') | map(attribute='item') | map('first') | list }}"
            -
                - { etype: group, mode: rx }
                - { etype: other, mode: '0' }
        when: not amazon2cis_system_is_container
  when:
      - amazon2cis_rule_6_2_13
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.13
      - permissions

- name: "6.2.14 | PATCH | Ensure users' dot files are not group or world-writable"
  block:
      - name: "6.2.14 | AUDIT | Ensure users' dot files are not group or world-writable | Check for files"
        shell: find /home/ -name "\.*" -perm /g+w,o+w
        changed_when: false
        failed_when: false
        register: amazon2cis_6_2_14_audit

      - name: "6.2.14 | AUDIT | Ensure users' dot files are not group or world-writable | Alert on files found"
        debug:
            msg: "Good news! We have not found any group or world-writable dot files on your sytem"
        failed_when: false
        changed_when: false
        when: amazon2cis_6_2_14_audit.stdout | length == 0

      - name: "6.2.14 | PATCH | Ensure users' dot files are not group or world-writable | Changes files if configured"
        file:
            path: '{{ item }}'
            mode: go-w
        with_items:
            - "{{ amazon2cis_6_2_14_audit.stdout_lines }}"
        when:
            - amazon2cis_6_2_14_audit.stdout | length > 0
            - amazon2cis_dotperm_ansibleManaged
  when:
      - amazon2cis_rule_6_2_14
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.14
      - permissions

- name: "6.2.15 | PATCH | Ensure no users have .forward files"
  file:
      path: "~{{ item }}/.forward"
      state: absent
  with_items:
      - "{{ users.stdout_lines }}"
  when:
      - amazon2cis_rule_6_2_15
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.15
      - files

- name: "6.2.16 | PATCH | Ensure no users have .netrc files"
  file:
      path: "~{{ item }}/.netrc"
      state: absent
  with_items:
      - "{{ users.stdout_lines }}"
  when:
      - amazon2cis_rule_6_2_16
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.16
      - files

- name: "6.2.17 | PATCH | Ensure no users have .rhosts files"
  file:
      path: "~{{ item }}/.rhosts"
      state: absent
  with_items:
      - "{{ users.stdout_lines }}"
  when:
      - amazon2cis_rule_6_2_17
  tags:
      - level1
      - automated
      - patch
      - rule_6.2.17
      - files
